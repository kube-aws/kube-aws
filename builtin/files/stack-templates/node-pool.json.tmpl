{{define "Metadata" -}}
{
  {{ if or .AwsEnvironment.Enabled (gt (len .CfnInitConfigSets) 0) -}}
  "AWS::CloudFormation::Init" : {
    "configSets" : {
      "noop": {}
      {{ if .AwsEnvironment.Enabled }}
      ,"aws-environment-env" : {
        "commands": {
          "write-environment": {
            "command": {
              "Fn::Join" : ["", [ "echo '",
              {{range $variable, $function := .AwsEnvironment.Environment}}
              "{{$variable}}=", {{$function}} , "\n",
              {{end}}
              "' > /etc/aws-environment" ] ]
            }
          }
        }
      }
      {{ end }}
      {{ range $n, $s := .CfnInitConfigSets }}
      ,{{ $n | quote }}: {{ $s | toJSON }}
      {{ end }}
    }
  }
  {{end -}}
}
{{end}}
{{define "SpotFleet"}}
  "{{.LogicalName}}": {
    "Type": "AWS::EC2::SpotFleet",
    "Properties": {
      "SpotFleetRequestConfigData": {
        "IamFleetRole": {{$.SpotFleet.IAMFleetRoleRef}},
        "AllocationStrategy": "diversified",
        "TargetCapacity": {{$.SpotFleet.TargetCapacity}},
        "SpotPrice": "{{$.SpotFleet.SpotPrice}}",
        "LaunchSpecifications": [
          {{range $subnetIndex, $workerSubnet := $.Subnets}}
          {{range $specIndex, $spec := $.SpotFleet.LaunchSpecifications}}
          {{if or (gt $subnetIndex 0) (gt $specIndex 0) }},{{end}}
          {
            "ImageId": "{{$.AMI}}",
            "Monitoring": { "Enabled": "true" },
            "InstanceType": "{{$spec.InstanceType}}",
            {{if $.KeyName}}"KeyName": "{{$.KeyName}}",{{end}}
            "WeightedCapacity": {{$spec.WeightedCapacity}},
            {{if $spec.SpotPrice}}
            "SpotPrice": "{{$spec.SpotPrice}}",
            {{end}}
            {{if $.IAMConfig.InstanceProfile.Arn }}
            "IamInstanceProfile": {
              "Arn": "{{$.IAMConfig.InstanceProfile.Arn}}"
            },
            {{else}}
            "IamInstanceProfile": {
              "Arn": {
                "Fn::GetAtt" : ["IAMInstanceProfileWorker", "Arn"]
              }
            },
            {{end}}
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "VolumeSize": "{{$spec.RootVolume.Size}}",
                  {{if gt $spec.RootVolume.IOPS 0}}
                  "Iops": "{{$spec.RootVolume.IOPS}}",
                  {{end}}
                  "VolumeType": "{{$spec.RootVolume.Type}}"
                }
              }{{range $volumeMountSpecIndex, $volumeMountSpec := $.VolumeMounts}},
              {
                "DeviceName": "{{$volumeMountSpec.Device}}",
                "Ebs": {
                  "VolumeSize": "{{$volumeMountSpec.Size}}",
                  {{if gt $volumeMountSpec.Iops 0}}
                  "Iops": "{{$volumeMountSpec.Iops}}",
                  {{end}}
                  "VolumeType": "{{$volumeMountSpec.Type}}"
                }
              }{{- end -}}{{range $raid0MountSpecIndex, $raid0MountSpec := $.Raid0Mounts}}{{range $DeviceIndex, $Device := $raid0MountSpec.Devices}},
              {
                "DeviceName": "{{$Device}}",
                "Ebs": {
                  "VolumeSize": "{{$raid0MountSpec.Size}}",
                  {{if gt $raid0MountSpec.Iops 0}}
                  "Iops": "{{$raid0MountSpec.Iops}}",
                  {{end}}
                  "VolumeType": "{{$raid0MountSpec.Type}}"
                }
              }{{end}}
              {{- end -}}
            ],
            "SecurityGroups": [
              {{range $sgIndex, $sgRef := $.SecurityGroupRefs}}
              {{if gt $sgIndex 0}},{{end}}
              {"GroupId":{{$sgRef}}}
              {{end}}
            ],
            "SubnetId": {{$workerSubnet.Ref}},
            "UserData": {{ $.UserData.Worker.Parts.instance.Template }}
          }
          {{end}}
          {{end}}
        ]
      }
    }{{ if .AwsEnvironment.Enabled }},
    "Metadata": {{template "Metadata" .}}
    {{- end }}
  },
{{end}}
{{define "AutoScaling"}}
    "{{.LogicalName}}": {
      "DependsOn": "{{.LaunchTemplateLogicalName}}",
      "Properties": {
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "MaxSize": "{{.MaxCount}}",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "MinSize": "{{.MinCount}}",
        {{if .AutoScalingGroup.MixedInstances.Enabled }}
        "MixedInstancesPolicy": {
          "InstancesDistribution" : {
            {{if .AutoScalingGroup.MixedInstances.OnDemandAllocationStrategy}}
            "OnDemandAllocationStrategy" : "{{.AutoScalingGroup.MixedInstances.OnDemandAllocationStrategy}}",
            {{end}}
            "OnDemandBaseCapacity" : {{.AutoScalingGroup.MixedInstances.OnDemandBaseCapacity}},
            "OnDemandPercentageAboveBaseCapacity" : {{.AutoScalingGroup.MixedInstances.OnDemandPercentageAboveBaseCapacity}},
            {{if .AutoScalingGroup.MixedInstances.SpotAllocationStrategy}}
            "SpotAllocationStrategy" : "{{.AutoScalingGroup.MixedInstances.SpotAllocationStrategy}}",
            {{end}}
            {{if .AutoScalingGroup.MixedInstances.SpotMaxPrice}}
            "SpotMaxPrice" : "{{.AutoScalingGroup.MixedInstances.SpotMaxPrice}}",
            {{end}}
            "SpotInstancePools" : {{.AutoScalingGroup.MixedInstances.SpotInstancePools}}
          },
          "LaunchTemplate" : {
            "LaunchTemplateSpecification" : {
              "LaunchTemplateId": { "Ref": "{{.LaunchTemplateLogicalName}}" },
              "Version": { "Fn::GetAtt" : [ "{{.LaunchTemplateLogicalName}}", "LatestVersionNumber" ] }
            },
            "Overrides" : [
              {{range $index, $instanceType := .AutoScalingGroup.MixedInstances.InstanceTypes}}
              {{if $index}},{{end}}
              {
                "InstanceType": "{{$instanceType}}"
              }
              {{end}}
            ]
          }
        },
        {{else}}
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref": "{{.LaunchTemplateLogicalName}}" },
          "Version": { "Fn::GetAtt" : [ "{{.LaunchTemplateLogicalName}}", "LatestVersionNumber" ] }
        },
        {{end}}
        "Tags": [
          {{range $k, $v := .InstanceTags -}}
          {
            "Key": "{{$k}}",
            "PropagateAtLaunch": "true",
            "Value": "{{$v}}"
          },
          {{end -}}
          {
            "Key": "kubernetes.io/cluster/{{ .ClusterName }}",
            "PropagateAtLaunch": "true",
            "Value": "owned"
          },
          {{range $n, $r := .ExtraCfnTags}}
          {{range $i, $j := $r}}
          {{toJson $j}},
          {{end}}
          {{end}}
          {
            "Key": "kube-aws:node-pool:name",
            "PropagateAtLaunch": "true",
            "Value": "{{.NodePoolName}}"
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}-{{.StackName}}-kube-aws-worker"
          }
        ],
        {{if .LoadBalancer.Enabled}}
        "LoadBalancerNames" : [
          {{range $index, $elb := .LoadBalancer.Names}}
          {{if $index}},{{end}}
          "{{$elb}}"
          {{end}}
        ],
        {{end}}
        {{if .TargetGroup.Enabled}}
        "TargetGroupARNs" : [
          {{range $index, $tg := .TargetGroup.Arns}}
          {{if $index}},{{end}}
          "{{$tg}}"
          {{end}}
        ],
        {{end}}
        "VPCZoneIdentifier": [
          {{range $index, $subnet := .Subnets}}
          {{if gt $index 0}},{{end}}
          {{$subnet.Ref}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      {{if .WaitSignal.Enabled}}
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "{{.MinCount}}",
          "Timeout" : "{{.CreateTimeout}}"
        }
      },
      {{end}}
      "UpdatePolicy" : {
        "AutoScalingScheduledAction" : {
          "IgnoreUnmodifiedGroupSizeProperties" : true
        },
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" :
          {{if .SpotPrice}}
          "0"
          {{else}}
          "{{.RollingUpdateMinInstancesInService}}"
          {{end}},
          {{ if .WaitSignal.Enabled -}}
          "WaitOnResourceSignals" : "true",
          "MaxBatchSize" : "{{.WaitSignal.MaxBatchSize 1}}",
          "PauseTime": "{{.CreateTimeout}}",
          {{ else -}}
          "MaxBatchSize" : "1",
          "PauseTime": "PT2M",
          {{- end }}
          "SuspendProcesses":[
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ]
        }
      }{{ if .AwsEnvironment.Enabled }},
      "Metadata": {{template "Metadata" .}}
      {{- end }}
    },
    {{- /* allow autoscaler to shut-down all nodes in a nodepool without lifecycle hooks if the batch size is equal to the max node count */ -}}
    {{- if and .NodeDrainer.Enabled (not (and (eq .NodePoolRollingStrategy "AvailabilityZone") (eq (.WaitSignal.MaxBatchSize 1) .MaxCount ))) }}
    "{{.LogicalName}}NodeDrainerLH" : {
      "Properties" : {
        "AutoScalingGroupName" : {
          "Ref": "{{.LogicalName}}"
        },
        "DefaultResult" : "CONTINUE",
        "HeartbeatTimeout" : "{{.NodeDrainer.DrainTimeoutInSeconds}}",
        "LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING"
      },
      "Type" : "AWS::AutoScaling::LifecycleHook"
    },
    {{- end }}
    "{{.LaunchTemplateLogicalName}}": {
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeSize": "{{.RootVolume.Size}}",
                {{if gt .RootVolume.IOPS 0}}
                "Iops": "{{.RootVolume.IOPS}}",
                {{end}}
                "VolumeType": "{{.RootVolume.Type}}"
              }
            }{{range $volumeMountSpecIndex, $volumeMountSpec := .VolumeMounts}},
            {
              "DeviceName": "{{$volumeMountSpec.Device}}",
              "Ebs": {
                "VolumeSize": "{{$volumeMountSpec.Size}}",
                {{if gt $volumeMountSpec.Iops 0}}
                "Iops": "{{$volumeMountSpec.Iops}}",
                {{end}}
                "VolumeType": "{{$volumeMountSpec.Type}}"
              }
            }{{- end -}}{{range $raid0MountSpecIndex, $raid0MountSpec := $.Raid0Mounts}}{{range $DeviceIndex, $Device := $raid0MountSpec.Devices}},
              {
                "DeviceName": "{{$Device}}",
                "Ebs": {
                  "VolumeSize": "{{$raid0MountSpec.Size}}",
                  {{if gt $raid0MountSpec.Iops 0}}
                  "Iops": "{{$raid0MountSpec.Iops}}",
                  {{end}}
                  "VolumeType": "{{$raid0MountSpec.Type}}"
                }
              }{{end}}
            {{- end -}}
          ],
          "IamInstanceProfile": {
             {{if .IAMConfig.InstanceProfile.Arn }}
              "Arn": "{{.IAMConfig.InstanceProfile.Arn}}"
            {{else}}
              "Name": { "Ref": "IAMInstanceProfileWorker" }
            {{end}}
          },
          "ImageId": "{{.AMI}}",
          "InstanceType": "{{.InstanceType}}",
          "Monitoring": {"Enabled": "true"},
          {{if .KeyName}}"KeyName": "{{.KeyName}}",{{end}}
          "SecurityGroupIds": [
            {{range $sgIndex, $sgRef := $.SecurityGroupRefs}}
            {{if gt $sgIndex 0}},{{end}}
            {{$sgRef}}
            {{end}}
          ],
          {{if not .AutoScalingGroup.MixedInstances.Enabled }}
            {{if .SpotPrice}}
              "InstanceMarketOptions": {
                "MarketType": "spot",
                "SpotOptions": {
                  "MaxPrice": "{{.SpotPrice}}"
                }
              },
            {{end}}
            {{if EbsOptimized .InstanceType }}
              "EbsOptimized": "true",
            {{end}}
          {{end}}
          "Placement": {
            "Tenancy": "{{.Tenancy}}"
          },
          "UserData": {{ .UserData.Worker.Parts.instance.Template }}
        }
      },
      "Type": "AWS::EC2::LaunchTemplate"
    {{if not .IAMConfig.InstanceProfile.Arn}}
    },
    {{else}}
    }
    {{end}}
{{end}}
{{define "IAMRole"}}
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMManagedPolicyWorker" : {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "Policy for managing kube-aws k8s Node Pool {{.NodePoolName}} ",
        "Path" : "/",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement": [
                {{range $s := .IAMConfig.Policy.Statements }}
                {
                  "Action": {{toJSON $s.Actions}},
                  "Effect": {{toJSON $s.Effect}},
                  "Resource": {{toJSON $s.Resources}}
                },
                {{end}}
                {
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeRegions"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:ModifyInstanceAttribute",
                  "Resource": "*"
                },
                {{- if $.UserData.Worker.Parts.s3 }}
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:{{.Region.Partition}}:s3:::{{ .Assets.S3Prefix }}*"
                },
                {{- end }}
                {{if .CloudWatchLogging.Enabled}}
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    { "Ref": "CloudWatchLogGroupARN" },
                    { "Fn::Join" : [ "", [{ "Ref": "CloudWatchLogGroupARN" }, ":log-stream:*"]] }
                  ]
                },
                {{ end }}
                {{ if .KubeResourcesAutosave.Enabled }}
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:{{.Region.Partition}}:s3:::{{ .KubeResourcesAutosave.S3Path }}/*"
                },
                {{end}}
                {{if .AssetsEncryptionEnabled }}
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {{end}}
                {{if .WaitSignal.Enabled}}
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource":
                    { "Fn::Join": [ "", [
                      "arn:{{.Region.Partition}}:cloudformation:",
                      { "Ref": "AWS::Region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":stack/",
                      { "Ref": "AWS::StackName" },
                      "/*" ]
                    ] }
                },
                {{end}}
                {{if .AwsNodeLabels.Enabled}}
                {
                  "Action": "autoscaling:Describe*",
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                },
                {{end}}
                {{if .SpotFleet.Enabled}}
                {
                  "Action": "ec2:CreateTags",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {{end}}
                {{if or .LoadBalancer.Enabled  .TargetGroup.Enabled}}
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {{end}}
                {{if .NodeDrainer.Enabled }}
                {
                  "Action": [
                    "autoscaling:DescribeAutoScalingInstances",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "autoscaling:CompleteLifecycleAction"
                  ],
                  "Effect": "Allow",
                  "Condition": {
                    "Null": { "autoscaling:ResourceTag/kubernetes.io/cluster/{{.ClusterName}}": "false" }
                  },
                  "Resource": "*"
                },
                {{end}}
                {{if .Kubernetes.Networking.AmazonVPC.Enabled}}
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AttachNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DetachNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeInstances",
                    "ec2:ModifyNetworkInterfaceAttribute",
                    "ec2:AssignPrivateIpAddresses"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:CreateTags",
                  "Resource": "arn:aws:ec2:*:*:network-interface/*"
                },
                {{end}}
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
            ]
        }
      }
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.{{.Region.PublicDomainName}}"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        {{if .IAMConfig.Role.Name }}
        "RoleName":  {"Fn::Join": ["-", ["{{$.ClusterName}}", {"Ref": "AWS::Region"}, "{{.IAMConfig.Role.Name}}"]]},
        {{end}}
        "ManagedPolicyArns": [
          {{range $policyIndex, $policyArn := .IAMConfig.Role.ManagedPolicies }}
            "{{$policyArn.Arn}}",
          {{end}}
          {"Ref": "IAMManagedPolicyWorker"}
        ]
      },
      "Type": "AWS::IAM::Role"
    }
{{end}}
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "kube-aws node pool stack for {{.ClusterName}} {{.NodePoolName}}",
  "Parameters" : {
    "EtcdStackName": {
      "Type": "String",
      "Description": "The name of an etcd stack used to import values into this stack"
    },
    "NetworkStackName": {
      "Type": "String",
      "Description": "The name of a network stack used to import values into this stack"
    }
    {{if .CloudWatchLogging.Enabled}}
    ,
    "CloudWatchLogGroupARN": {
      "Type": "String",
      "Description": "CloudWatch LogGroup to send journald logs to"
    }
    {{ end }}
  },
  "Resources": {
    {{if .SpotFleet.Enabled}}
    {{template "SpotFleet" .}}
    {{else}}
    {{template "AutoScaling" .}}
    {{end}}
    {{if not .IAMConfig.InstanceProfile.Arn}}
    {{template "IAMRole" .}}
    {{end}}
    {{range $n, $r := .ExtraCfnResources}}
    ,
    {{quote $n}}: {{toJSON $r}}
    {{end}}
  },
  "Outputs": {
    {{if not .IAMConfig.InstanceProfile.Arn }}
    "WorkerIAMRoleArn": {
      "Description": "The ARN of the IAM role for this Node Pool",
      "Value": {"Fn::GetAtt" : ["IAMRoleWorker", "Arn"] },
      "Export": { "Name": { "Fn::Sub": "${AWS::StackName}-WorkerIAMRoleArn" } }
    },
    {{end}}
    "StackName": {
      "Description": "The name of this stack",
      "Value": { "Ref": "AWS::StackName" }
    }
    {{range $n, $r := .ExtraCfnOutputs}}
    ,
    {{quote $n}}: {{toJSON $r}}
    {{end}}
  }
}
